/**
  Nothing needs to be implemented here. This file exposes a function
  which returns random datapoints, generated by a decision tree.
  This helps create data that is suitable for a decision tree.
*/

var randomDatapoints = (function(){

  // These are some helper functions for generating random data from a distribution.
  var exponential = function(lambda) {
    return function() {
      return jStat.exponential.sample(lambda);
    };
  }
  var intExponential = function(lambda) {
    return function() {
      return Math.floor(exponential(lambda)());
    };
  }
  var intExponentialWithOffset = function(lambda, offset) {
    return function() {
      return intExponential(lambda)() + offset;
    };
  }
  var beta = function(alpha, beta) {
    return function () {
      return roundDecimal(jStat.beta.sample(alpha, beta), 20);
    };
  }
  var bernoulli = function(theta) {
    return function() {
      var rand = Math.random();
      if (rand < theta) return 1;
      return 0;  
    };
  }
  var logNormal = function(mu, sigma) {
    return function() {
      return jStat.lognormal.sample(mu, sigma);
    };
  }

  // The decision tree node for generating the random data.
  function Node() {
    this.left;
    this.right;
    this.feature;
    this.pHigh;
  }

  /**
    Each feature can be high ("H") or low ("L")
    This helps separate out the datapoints
    Real values are then generated from "H" and "L" following random distributions in valueFunctionForFeature
  */
  var defaultsForFeature = {
    NUM_CHARGEBACKS: "L",
    AGE_OF_ACCOUNT_IN_DAYS: "H",
    DECLINE_RATE: "L",
    CARD_DIVERSITY: "H"
  };

  var valueFunctionForFeature = {
    NUM_CHARGEBACKS: {
      "H": intExponentialWithOffset( 1/10, 40),
      "L": intExponentialWithOffset( 1/10, 0)
    },
    AGE_OF_ACCOUNT_IN_DAYS: {
      "H": intExponentialWithOffset( 1/365, 365),
      "L": intExponentialWithOffset( 1/365, 0)
    },
    DECLINE_RATE: {
      "H": beta(4.75, 1.36),
      "L": beta(1.36, 4.75)
    },
    CARD_DIVERSITY:{
      "H": beta(4.75, 1.36),
      "L": beta(1.36, 4.75)
    },
  }



  function generatePointFromTree(tree) {
    var classPurity = 0.90;

    // If we are at a leaf (FRAUD or NOT_FRAUD), we assign the label. 
    // We introduce some random noise, controlled by classPurity
    if (tree === Label.FRAUD) {
      var fraud = Math.random() < classPurity;
      var label = fraud ? Label.FRAUD : Label.NOT_FRAUD;
      return {
        label: label
      }  
    }

    if (tree === Label.NOT_FRAUD) {
      var NOT_FRAUD = Math.random() < classPurity;
      var label = NOT_FRAUD ? Label.NOT_FRAUD : Label.FRAUD;
      return {
        label: label
      }  
    }

    var high = Math.random() < tree.pHigh;

    var features;
    if (high) {
      features = generatePointFromTree(tree.right);
      features[tree.feature] = "H";
    } else {
      features = generatePointFromTree(tree.left);
      features[tree.feature] = "L";
    }

    return features;
  }

  function generateDatapoint(tree) {
    var featuresAndLabel = generatePointFromTree(tree);

    var featureMap = {};
    // Create default value for non set features
    Object.keys(Features).forEach(function(feature) {
      if (featuresAndLabel[feature] === undefined) {
        featuresAndLabel[feature] = defaultsForFeature[feature];
      }

      var highOrLow = featuresAndLabel[feature];
      var value = valueFunctionForFeature[feature][highOrLow]();

      featureMap[feature] = value;
    });

    return new Datapoint(featureMap, featuresAndLabel.label);
  }

  // Below is the actual tree built for generating the random data.

  var chargebackNode = new Node();
  chargebackNode.left = Label.NOT_FRAUD;
  chargebackNode.right = Label.FRAUD;
  chargebackNode.pHigh = 0.20;
  chargebackNode.feature = Features.NUM_CHARGEBACKS;

  var cardDiversityNode = new Node();
  cardDiversityNode.left = Label.FRAUD;
  cardDiversityNode.right = Label.NOT_FRAUD;
  cardDiversityNode.pHigh = 0.90;
  cardDiversityNode.feature = Features.CARD_DIVERSITY;

  var declineRateNode = new Node();
  declineRateNode.left = cardDiversityNode;
  declineRateNode.right = Label.FRAUD;
  declineRateNode.pHigh = 0.20;
  declineRateNode.feature = Features.DECLINE_RATE;

  var accountAgeNode = new Node();
  accountAgeNode.left = declineRateNode;
  accountAgeNode.right = chargebackNode;
  accountAgeNode.pHigh = 0.70;
  accountAgeNode.feature = Features.AGE_OF_ACCOUNT_IN_DAYS;


  // This is the function we will return. All the rest is "private".
  function randomDatapoints(num) {
    var datapoints = [];
    for (var i = 0; i < num; i++) {
      var datapoint = generateDatapoint(accountAgeNode);
      datapoints.push(datapoint);
    }
    return datapoints; 
  }

  return randomDatapoints;
})();



